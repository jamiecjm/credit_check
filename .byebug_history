c
number.scan(/(.)(.)/) {|x,y| x.to_i+y.to_i}
number.scan(/(.)(.)/) {|x,y| x+y}
number.scan(/\d/)
number.scan(/d/)
number.gsub(/(.)(.?)/) {|x| $1.to_i + $2.to_i}
number
c
number.split('').map(&:to_i).inject(:+)
number
c
@card_number
number
number.split('').map(&:to_i).inject(:+)
c
product
c
(odd_number.to_i)*even_number
odd_number.to_i
c
(odd_number+even_number.to_s).split('').map(&:to_i).inject(:+)
c
@card_number.reverse
@card_number
@card_number.reverse.gsub(/.(.)/, '\1')
even_number
odd_number
c
even_number
odd_number
(odd_number+even_number.to_s).split('').map(&:to_i).inject(:+)
c
(odd_number+even_number.to_s).split('').map(&:to_i)
(odd_number+even_number.to_s).split('')
(odd_number+even_number.to_s).split('').inject(:+)
numbers.flatten.inject(:+)
c
@card_number.reverse.gsub(/.(.)/, '\1')
odd_number+even_number.to_s
even_number
odd_number
n
numbers
c
numbers
c
num
c
exit
(i*2).divmod(10)
i*2
16.divmod(10).inject(:+)
16.divmod(10)
'16'.divmod(10)
16.divmod(10)
15.divmod(10)
i*2
i*2.divmod(10)
i*2.divmod(10).inject(:+)
i
j.odd?
num
c
num
c
num
c
num
exit
num
c
num
c
num
c
num
c
num
c
num
c
sum
num
exit
c
n
num
bum
i
j.odd?
j
sum
